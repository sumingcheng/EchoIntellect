version: '3.8'

services:
  # Milvus 相关服务
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      ETCD_AUTO_COMPACTION_MODE: revision
      ETCD_AUTO_COMPACTION_RETENTION: 1000
      ETCD_QUOTA_BACKEND_BYTES: 4294967296
      ETCD_SNAPSHOT_COUNT: 50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - echointellect

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - echointellect

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.12
    command: [ "milvus", "run", "standalone" ]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9091/healthz" ]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - etcd
      - minio
    networks:
      - echointellect

  # 数据库服务
  mysql:
    container_name: mysql_server
    image: mysql:8.0.36
    environment:
      MYSQL_ROOT_PASSWORD: admin123456
      MYSQL_DATABASE: demo
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin123456
    ports:
      - "3306:3306"
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - echointellect

  # Milvus 可视化工具
  attu:
    container_name: milvus-attu
    image: zilliz/attu:v2.4
    ports:
      - "19000:3000"
    environment:
      MILVUS_URL: standalone:19530
    networks:
      - echointellect

  # 监控工具
  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma:1
    restart: always
    ports:
      - "7001:3001"
    volumes:
      - uptime-kuma:/app/data
    networks:
      - echointellect

  # 嵌入式服务
  embedding:
    container_name: embedding
    image: jokerwho/bge-large-api:latest
    ports:
      - "6008:6008"
    networks:
      - echointellect
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: '8G'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # API 服务
  one-api:
    container_name: one-api
    image: justsong/one-api
    restart: always
    ports:
      - "3000:3000"
    environment:
      SQL_DSN: "root:123456@tcp(mysql:3306)/oneapi"
      TZ: Asia/Shanghai
    volumes:
      - /home/ubuntu/data/one-api:/data
    depends_on:
      - mysql
    networks:
      - echointellect

  # Nginx 服务
  nginx:
    container_name: nginx
    image: nginx:stable-alpine
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - ./html:/usr/share/nginx/html
      - ./test.conf:/etc/nginx/nginx.conf
    networks:
      - echointellect

volumes:
  mysql:
  uptime-kuma:

networks:
  echointellect:
